plugins {
    id 'java'
    id 'java-gradle-plugin'
    id 'maven-publish'
    id "com.github.spotbugs" version "3.0.0"
}

group 'com.github.gruppun'
version '1.1'

sourceCompatibility = 11
targetCompatibility = 11

project.version = "1.1"
project.group = "com.github.gruppun"
project.description = "A static design pattern analyser tool."

repositories {
    mavenCentral()
}

apply plugin: "java"
apply plugin: "pmd"
apply plugin: 'checkstyle'
apply plugin: "application"
apply plugin: "jacoco"

dependencies {
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.4.2')
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.4.2')
    implementation 'com.github.javaparser:javaparser-core:3.15.12'
    implementation 'com.github.javaparser:javaparser-symbol-solver-core:3.15.12'
    implementation 'com.github.javaparser:javaparser-core-serialization:3.15.10'
    compile group: 'org.glassfish', name: 'javax.json', version: '1.0.4'
    compile group: 'com.github.spotbugs', name: 'spotbugs', version: '4.0.0', ext: 'pom'
    implementation 'com.github.spotbugs:spotbugs:4.0.0'
}

mainClassName = 'Main'

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    // configure automatically generated tasks
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

tasks.withType(Pmd) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

pmd {
    toolVersion '6.21.0'
    ignoreFailures = false
    pmdTest.enabled = false
    consoleOutput false
    sourceSets = [sourceSets.main]
    ruleSetFiles = files("$project.rootDir/config/pmd/rules-pmd.xml")
    ruleSets = [] // Remove built in rulesets
}

jacoco {
    toolVersion '0.8.2'
    reportsDir = file("$buildDir/reports")
}

jacocoTestReport {
    reports {
        html.enabled = true
    }
}


checkstyle {
    toolVersion '8.29'
    checkstyleTest.enabled = false
    ignoreFailures false
//    configFile file("config/checkstyle/checkstyle.xml")
    maxWarnings 0
}
checkstyleMain {
    source = 'src/main'
}
tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

test {
    useJUnitPlatform()
    jacocoTestReport
    testLogging {
        exceptionFormat = 'full'
        events = ["passed", "failed", "skipped"]
        showStandardStreams = true
    }
}

// Custom gradle plugin START

gradlePlugin {
    plugins {
        staticAnalyser {
            id = "StaticAnalyser"
            implementationClass = "plugin.AnalyserPlugin"
        }
    }
}

publishing {
    publications {
        pluginPublication(MavenPublication) {
            from components.java
            groupId project.group
            artifactId "staticanalyser"
            version project.version
        }
    }
}

// Custom gradle plugin END